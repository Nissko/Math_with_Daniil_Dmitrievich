@page "/weather"
@inject HttpClient Http

<PageTitle>Погода</PageTitle>

<h1>Погода</h1>

<p>Здесь происходит подключение к серверу с последующими запросами.</p>

@if (forecasts == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
    
    @foreach (var user in users)
    {
        <ul>
            @user
        </ul>
    }
}

@code {
    private WeatherForecast[]? forecasts;
    private string[]? users;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("weatherforecast");
        users = await Http.GetFromJsonAsync<string[]>("api/users");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}